package superbetDAO.api;

import java.io.IOException;
import java.io.StringReader;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.json.stream.JsonGenerationException;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.jboss.util.NotImplementedException;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.io.JsonStringEncoder;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.JsonParseException;

import modele.BetTicketK;
import modele.Caissier;
import modele.Keno;
import superbetDAO.api.exeception.DAOAPIException;

public abstract class AbstractDAOAPI<T> {
	
	final Class<T> typeParameterClass;
	ObjectMapper mapper;
	JsonStringEncoder jsonEncoder;
	public static final int TIMEOUT = 120;//seconds
	
	public AbstractDAOAPI(Class<T> type) {
		this.typeParameterClass = type;
	//	this.target = target;
		this.mapper = new ObjectMapper();
		this.mapper.setSerializationInclusion(Include.NON_NULL);
		this.jsonEncoder = JsonStringEncoder.getInstance();
	}
	
	public T get(int id) {
		throw new NotImplementedException();
	}
	
	public String get(Map<String , String> filtre,String host, String protocole, String port, String url, boolean secure) throws ClientProtocolException, IOException, JSONException, URISyntaxException, DAOAPIException{
		URIBuilder builder = new URIBuilder(url);

		if(secure) {
		//	builder.setParameter("password", "scoring");
			//builder.setParameter("login", "passwordafb");
		}
		
		if(filtre != null) {
			for(String key : filtre.keySet()) {
				builder.addParameter(key, filtre.get(key));
			}
		}
		
		builder.build();
		
		//System.out.println("request url " +builder.build());

		HttpGet getRequest = new HttpGet(builder.build());
		getRequest.setHeader("Content-type", "application/json");
	//	getRequest.addHeader("Authorization", Parameters.authentication());
		
		HttpResponse httpResponse = this.getHttpClient().execute(getTarget(host, protocole, port), getRequest);
		this.checkStatusResponse(httpResponse);
		String results =null;
		
		
		HttpEntity entity = httpResponse.getEntity();
		
		if (entity != null) {
			String retSrc = EntityUtils.toString(entity);		
			
				//retSrc = new JSONArray().toString();
				JSONObject jsonObject = new JSONObject(retSrc);
				
				//System.out.println("resultString: "+retSrc);
				results = jsonObject.getString("response");
		}
		
		return results;
	}
	
	public HttpHost getTarget(String host, String protocole, String port) {
		// specify the host, protocol, and port
		if(StringUtils.isNotBlank(host) && StringUtils.isNotBlank(port) && StringUtils.isNotBlank(protocole))
			return new HttpHost(host, Integer.parseInt(port), protocole);
		else
			return null;
	}

	public List<T> filter(Map<String , String> filtre ,String host, String protocole, String port, String url, boolean secure) throws ClientProtocolException, IOException, JSONException, URISyntaxException, DAOAPIException {
		
		URIBuilder builder = new URIBuilder(url);

		if(secure) {
		//	builder.setParameter("password", "scoring");
			//builder.setParameter("login", "passwordafb");
		}
		
		if(filtre != null) {
			for(String key : filtre.keySet()) {
				builder.addParameter(key, filtre.get(key));
			}
		}
		
		builder.build();
		
		//System.out.println("request url " +builder.build());

		HttpGet getRequest = new HttpGet(builder.build());
		getRequest.setHeader("Content-type", "application/json");
	//	getRequest.addHeader("Authorization", Parameters.authentication());
		
		HttpResponse httpResponse = this.getHttpClient().execute(getTarget(host, protocole, port), getRequest);
		this.checkStatusResponse(httpResponse);
		List<T> results = new ArrayList<>();
		
		
		HttpEntity entity = httpResponse.getEntity();
		
		if (entity != null) {
			String retSrc = EntityUtils.toString(entity);				
			if(retSrc.length() == 0) {
				retSrc = new JSONArray().toString();
			}
			//System.out.println("resultString: "+retSrc);
			if(retSrc.substring(0, 1).equalsIgnoreCase("{")){
				retSrc = "["+retSrc+"]";
			}
			
			// CONVERT RESPONSE STRING TO JSON ARRAY
			JSONArray ja = new JSONArray(retSrc);
			int n = ja.length();
			for(int i=0 ; i< n ; i++) {
				JSONObject jo = ja.getJSONObject(i);
				results.add(this.mapToObject(jo));
			}
		}
		
		return results;
	}

	public HttpClient getHttpClient() {
		RequestConfig requestConfig = RequestConfig.custom()
				.setConnectTimeout(TIMEOUT*1000)
				.setConnectionRequestTimeout(TIMEOUT*1000)
				.setSocketTimeout(TIMEOUT*1000)
				.build();
		//System.out.println("Connection Timeout , " + requestConfig.getConnectionRequestTimeout());
		HttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).build();
		return client;
	}
	
	public CloseableHttpClient getClosableHttpClient() {
		
		RequestConfig config = RequestConfig.custom()
		  .setConnectTimeout(TIMEOUT * 20000)
		  .setConnectionRequestTimeout(TIMEOUT * 20000)
		  .setSocketTimeout(TIMEOUT * 20000).build();
		CloseableHttpClient client = 
		  HttpClientBuilder.create().setDefaultRequestConfig(config).build();
		
		return client;
	}
	
//	public HttpHost getTarget() {
//		return this.target;
//	}
	
	public T mapToObject(JSONObject obj) throws JsonParseException, JsonMappingException, IOException, JSONException {
		ObjectMapper map = new ObjectMapper();
		StringReader reader = new StringReader(obj.toString());
		T o = this.mapper.readValue(reader, this.typeParameterClass);
		//System.out.println("returned object " +  o);
		return o;
	}
	
	public String mapToJsonStrings(T obj) throws JsonGenerationException, JsonMappingException, IOException, JSONException {
		String map = this.mapper.writeValueAsString(obj);
		String encoded = this.encodeJson(map);
		//System.out.println("encoded "+ encoded);
		return map;
	}
	
	private String encodeJson(String jsonString) {
		return new String(jsonEncoder.quoteAsString(jsonString));
	}
	
	protected void checkStatusResponse(HttpResponse response) throws DAOAPIException {
		int status = response.getStatusLine().getStatusCode();
		
		if(status != 200 && status != 201 && status != 202) {
			throw new DAOAPIException(" HTTP : "+status + " result "+response.getStatusLine().getReasonPhrase());
		}
	}
	
	public String getListAllUrl() {
		return this.getUrl()+"/list-all";
	}
	
	public abstract String getUrl();

	public BetTicketK sendPostSlip(String url, BetTicketK slip) throws ClientProtocolException, IOException, JSONException, URISyntaxException, DAOAPIException {
		
		String playload = null;
		String resp_code;
		
		playload = mapToJsonString(slip);
		if(!isJSONValid(playload)) {
			return null;
		}
		
        HttpPost post = new HttpPost(url+"/placeslip-keno");

        // add request parameter, form parameters
        post.setHeader("content-type", "application/json");
		post.setEntity(new StringEntity(playload , Consts.UTF_8));

        try (CloseableHttpResponse response = this.getClosableHttpClient().execute(post)) {
        	BetTicketK bet = new BetTicketK();
        	try{
        		HttpEntity entity = response.getEntity();
        		
        		if (entity != null) {
        			
	        		String content = EntityUtils.toString(entity);
	        		System.out.println("content: "+content);
	                JSONObject json = new JSONObject(content);
	                
	                //Verification du code reponse
	                resp_code = json.getString("entity");
	                System.out.println("resp_code "+resp_code);
	                
	                JSONObject j = new JSONObject(resp_code);
	                
	                String code = j.getString("code");
	                System.out.println("CODE: "+code);
	                if(!code.equalsIgnoreCase("200")) {
	                	return null;
	                }
	                JSONObject btkObject = j.getJSONObject("btick");
	                System.out.println("BETICKET: "+btkObject);
	                bet = this.mapToBetTicket(btkObject);
    			}
        	}
        	catch(Exception e) {
        		e.printStackTrace();
        		return null;
        	}
            
            return bet;
        }

    }
	
	public boolean sendPostEOD(String url, List<String> bkeve) throws ClientProtocolException, IOException, JSONException, URISyntaxException, DAOAPIException {
		
		String _json = new Gson().toJson(bkeve);
		
		String playload = mapToJsonString(bkeve);
	//	System.out.println("\n"+_json);
		if(!isValidJson(playload)) {
			return false;
		}
        HttpPost post = new HttpPost(url+"/EODevents");

        // add request parameter, form parameters
        post.setHeader("content-type", "application/json");
		post.setEntity(new StringEntity(_json , Consts.UTF_8));
	
		try (CloseableHttpResponse response = this.getClosableHttpClient().execute(post)) {
        	
        	try{
        		HttpEntity entity = response.getEntity();
        		
        		if (entity != null) {
        			
	        		String content = EntityUtils.toString(entity);
	        		System.out.println(content); 
	        			
	                JSONObject json = new JSONObject(content);
	                playload = json.getString("code");
	    	    	//System.out.println("CODE REPONSE: "+playload);
    			}
        	}
        	catch(Exception e) {
        		e.printStackTrace();
        	}
        	
        	return playload.equalsIgnoreCase("200");
      }
    }
	
	public BetTicketK _sendPostReverseEvent(String url, String bkeve) throws ClientProtocolException, IOException, JSONException, URISyntaxException, DAOAPIException {
		
		String resp_code;
		//System.out.println("EXECUTE REVERSE: "+url+"/reverseevent/"+bkeve);
        HttpPost post = new HttpPost(url+"/reverseevent/"+bkeve);
      
        post.setHeader("content-type", "application/json");

//		System.out.println("URI: "+post.getURI());
			 try (CloseableHttpResponse response = this.getClosableHttpClient().execute(post)) {
				 BetTicketK eve = new BetTicketK();
		        	try{
		        		HttpEntity entity = response.getEntity();
		        		
		        		if (entity != null) {
		        			
			        		String content = EntityUtils.toString(entity);
			        		System.out.println(content); 
			                JSONObject json = new JSONObject(content);
			                
			                //Verification du code reponse
			                resp_code = json.getString("code");
			                System.out.println(resp_code); 
			                if(!resp_code.equalsIgnoreCase("200")) {
			                	return null;
			                }
			        		
			                JSONObject eveObject = json.getJSONObject("eve");
			                JSONArray eveArray = new JSONArray();
			                eveArray.put(eveObject);
			  
			    	    	eve = new BetTicketK();
		    				// CONVERT  JSON ARRAY to object bkeve
		    			
		    				int n = eveArray.length();
		    				for(int i=0 ; i< n ; i++) {
		    					JSONObject jo = eveArray.getJSONObject(i);
		    					eve = this.mapToBetTicket(jo);
		    				}
		    				
		    		//		System.out.println("EVE LIST: "+eve);
		    			}
		        	}
		        	catch(Exception e) {
		        		e.printStackTrace();
		        		return null;
		        	}
		        	
		        	return eve;
        }
    }
	
   
	public Caissier getUser(Caissier caissier, String url, String partner) throws ClientProtocolException, IOException, JSONException, URISyntaxException, DAOAPIException {
		
		String resp_code;
		HttpGet getRequest = new HttpGet(url+"/finduser/"+partner+"/"+caissier.getLoginc()+"/"+caissier.getProfil());
		// add request parameter, form parameters
		getRequest.setHeader("content-type", "application/json");
		
		try (CloseableHttpResponse response = this.getClosableHttpClient().execute(getRequest)) {
			Caissier cais = new Caissier();
        	HttpEntity entity = null;
        	
        	try{
        		entity = response.getEntity();
        		
        		if (entity != null) {
        			
	        		String content = EntityUtils.toString(entity);
//	        	    System.out.println("user-content: "+content);
	                JSONObject json = new JSONObject(content);
	                
	                //Verification du code reponse
	                resp_code = json.getString("entity");
	                System.out.println("resp_code "+resp_code);
	                
	                JSONObject j = new JSONObject(resp_code);
	                
	                String code = j.getString("code");
//	                System.out.println("CODE: "+code);
	                if(!code.equalsIgnoreCase("200")) {
	                	return null;
	                }
	                JSONObject caisObject = j.getJSONObject("cais");
//	                System.out.println("CAISSIER: "+caisObject);
	                cais = this.mapToCaissier(caisObject);
	             

    				
    				
    			}
        	}
        	catch(Exception e) {
        		e.printStackTrace();
        		return null;
        	}
        	

			return cais;
        	//return eve;
		}
    }
	
	public Double getBalance(String url, Long ncp) throws ClientProtocolException, IOException, 
		JSONException, URISyntaxException, DAOAPIException {
		
		String resp_code;
		HttpGet getRequest = new HttpGet(url+"/findbalance/"+ncp);
		// add request parameter, form parameters
		getRequest.setHeader("content-type", "application/json");
		
		try (CloseableHttpResponse response = this.getClosableHttpClient().execute(getRequest)) {
        	Double solde = 0d;
        	HttpEntity entity = null;
        	
        	try{
        		entity = response.getEntity();
        		
        		if (entity != null) {
        			
	        		String content = EntityUtils.toString(entity);
	       // 		System.out.println(content);
	        		if(!isValidJson(content)) {
	        			return null;
	        		}
	                JSONObject json = new JSONObject(content);
	                
	                //Verification du code reponse
	                resp_code = json.getString("entity");
	      //          System.out.println("resp_code "+resp_code);
	                
	                JSONObject j = new JSONObject(resp_code);
	                
	                String code = j.getString("code");
	                if(!code.equalsIgnoreCase("200")) {
	                	return 0d;
	                }
	                
	                String retSrc = j.getString("data");
	    //            System.out.println(retSrc);
	                JSONObject jsonObj = new JSONObject(retSrc.toString());
	                
	                if(jsonObj.has("balance")) {
	                	solde = jsonObj.getDouble("balance");
	                }
	                else {
	                	solde = 0d;
	                }
	               
	         //       System.out.println("Solde: "+solde);
	                	           
    			}
        	}
        	catch(Exception e) {
       // 	catch(NumberFormatException | NullPointerException | JSONException e) {
        		//System.err.println(e.getMessage());
        		e.printStackTrace();
        		solde = 0d;
        		return solde;
        	}
        	
			return solde;
		}
	}
	
	public Keno getMaxDraw(String url, String coderace) throws ClientProtocolException, IOException, 
	JSONException, URISyntaxException, DAOAPIException {
	
	String resp_code;
	HttpGet getRequest = new HttpGet(url+"/max-draw/"+coderace);
	// add request parameter, form parameters
	getRequest.setHeader("content-type", "application/json");
	
	try (CloseableHttpResponse response = this.getClosableHttpClient().execute(getRequest)) {
		Long max = 0L;
		Keno keno = new Keno();
    	HttpEntity entity = null;
    	
    	try{
    		entity = response.getEntity();
    		
    		if (entity != null) {
    			
        		String content = EntityUtils.toString(entity);
        		System.out.println(content);
        		if(!isValidJson(content)) {
        			return null;
        		}
                JSONObject json = new JSONObject(content);
                
                //Verification du code reponse
                resp_code = json.getString("entity");
                System.out.println("resp_code "+resp_code);
                
                JSONObject j = new JSONObject(resp_code);
                
                String code = j.getString("code");
                if(!code.equalsIgnoreCase("200")) {
                	return null;
                }
                JSONObject kenoObject = j.getJSONObject("ken");
                keno = this.mapToKeno(kenoObject);
                
                	           
			}
    	}
    	catch(Exception e) {
    		e.printStackTrace();
    	}
    	
		return keno;
	}
  }
	
	public Long getBarcode(String url, int jeu) throws ClientProtocolException, IOException, 
			JSONException, URISyntaxException, DAOAPIException {
	
		HttpGet getRequest = new HttpGet(url+"/barcode/"+jeu);
		// add request parameter, form parameters
		getRequest.setHeader("content-type", "application/json");
		
		try (CloseableHttpResponse response = this.getClosableHttpClient().execute(getRequest)) {
	    	Long barcode = null;
	    	HttpEntity entity = null;
	    	
	    	try{
	    		entity = response.getEntity();
	    		
	    		if (entity != null) {
	        		String content = EntityUtils.toString(entity);
	        		System.out.println("barcode: "+content);  
	        		JSONObject jsonObj = new JSONObject(content);
	        		barcode = jsonObj.getLong(content);
	        		//barcode = Long.parseLong(content);
				}
	    	}
	    	catch(Exception e) {
	    		e.printStackTrace();
	    	}
	    	
			return barcode;
		  }
    }
	
	public String mapToJsonString(Object obj) throws JsonGenerationException, JsonMappingException, IOException, JSONException{
	 //	ObjectMapper mapper = new ObjectMapper();
	 	//mapper.setSerializationInclusion(Include.NON_NULL);
		String map = null;
		try {
		     map = this.mapper.writeValueAsString(obj);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		String encoded = this.encodeJson(map);
		return map;
	}
	
	public BetTicketK mapToBetTicket(JSONObject obj) throws JsonParseException, JsonMappingException, IOException, JSONException {
		BetTicketK o = this.mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY).readValue(obj.toString(), BetTicketK.class);
		return o;
	}
	
	public Caissier mapToCaissier(JSONObject obj) throws JsonParseException, JsonMappingException, IOException, JSONException {
		Caissier o = this.mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY).readValue(obj.toString(), Caissier.class);
		return o;
	}
	
	public Keno mapToKeno(JSONObject obj) throws JsonParseException, JsonMappingException, IOException, JSONException {
		Keno o = this.mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY).readValue(obj.toString(), Keno.class);
		return o;
	}

	private boolean isJSONValid(String jsonInString ) {
	    try {
	      // final ObjectMapper mapper = new ObjectMapper();
	       this.mapper.readTree(jsonInString);
	       return true;
	    } catch (IOException e) {
	       return false;
	    }
	}
	
	private Boolean isValidJson(String maybeJson){
        try {
            final ObjectMapper mapper = new ObjectMapper();
            mapper.readTree(maybeJson);
            return true;
        } catch (IOException e) {
            return false;
        }
    }
	
	public String sendSimpleSMS(String baseUrl, String message, String phone) throws ClientProtocolException, IOException, URISyntaxException{
		
		try (CloseableHttpClient client = HttpClientBuilder.create().useSystemProperties().build()) {
			java.net.URI uri = null;
			try {
				uri = new URIBuilder(baseUrl)
						.addParameter("message", message)
						.addParameter("phone", phone)
						.build();
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			HttpGet getRequest = new HttpGet(uri);
			
			CloseableHttpResponse resp = client.execute(getRequest);
			
			return resp.getEntity().toString();
		}
	}
	
	public String sendSimpleMAIL(String baseUrl, String message, String phone) throws ClientProtocolException, IOException, URISyntaxException{
		return null;
	}
}
