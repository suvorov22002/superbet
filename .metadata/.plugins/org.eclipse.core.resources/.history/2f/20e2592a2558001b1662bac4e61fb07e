package business;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import config.Timestamp;
import config.UtileKeno;
import config.UtileSpin;
import modele.Caissier;
import modele.EffChoicek;
import modele.EffChoicep;
import modele.Keno;
import modele.Misek;
import modele.Misek_temp;
import modele.Misep;
import modele.Miset;
import modele.Partner;
import modele.Spin;
import modele.Versement;
import superbetDAO.AirtimeDAO;
import superbetDAO.DAOException;
import superbetDAO.EffChoicekDAO;
import superbetDAO.EffChoicepDAO;
import superbetDAO.KenoDAO;
import superbetDAO.MisekDAO;
import superbetDAO.Misek_tempDAO;
import superbetDAO.MisepDAO;
import superbetDAO.MisetDAO;
import superbetDAO.PartnerDAO;
import superbetDAO.SpinDAO;
import superbetDAO.UtilDAO;
import superbetDAO.VersementDAO;

public final class ManageVersForm {
	
	private static final String FIELD_CODE = "barcode";
	private static final String FIELD_VERS = "versement";
	
	private  String resultat = null;
	private  Map<String, String> erreurs = new HashMap<String, String>();
	private String draw_result;
	private Map<String, String> drawData = new HashMap<String, String>();
	private Map<String, String> details_tickets = new HashMap<String, String>();
	ArrayList<Map<String, String>> evenements = new ArrayList<Map<String, String>>();
	private int multiplicite;
	
	private boolean isTesting = false; // test de ticket en cours
	private boolean bonusDown;
	private double bonusWinAmount;
	private int bonusWinCode;
	private int bonusTicketCode;
	
	private KenoDAO kenoDao;
	private SpinDAO spinDao;
	private MisetDAO misetDao;
	private EffChoicekDAO effchoicekDao;
	private EffChoicepDAO effchoicepDao;
	private MisekDAO misekDao;
	private MisepDAO misepDao;
	private VersementDAO verstDao;
	private PartnerDAO partnerDao;
	private Misek_tempDAO misektpDao;
	private UtilDAO utilDao;
	private AirtimeDAO airtimeDao;
	
	
	
	public String getResultat() {
		return resultat;
	}

	public Map<String, String> getErreurs() {
		return erreurs;
	}

	public Map<String, String> getDrawData() {
		return drawData;
	}

	public ArrayList<Map<String, String>> getEvenements() {
		return evenements;
	}

	public void setDraw_result(String draw_result) {
		this.draw_result = draw_result;
	}

	public void setTesting(boolean isTesting) {
		this.isTesting = isTesting;
	}

	public  void setErreurs(String champ, String message) {
		erreurs.put(champ, message);
	}
	
	public void setDrawData(String champ, String val){
		drawData.put(champ, val);
	}
	
	public void setDetailTicket(String champ, String val){
		details_tickets.put(champ, val);
	}
	public int getMultiplicite() {
		return multiplicite;
	}
	
	public ManageVersForm(KenoDAO kenoDao,SpinDAO spinDao,MisetDAO misetDao,UtilDAO utilDao,EffChoicekDAO effchoicekDao,MisekDAO misekDao,
			EffChoicepDAO effchoicepDao,MisepDAO misepDao,VersementDAO verstDao, PartnerDAO partnerDao, Misek_tempDAO misektpDao,AirtimeDAO airtimeDao){
		this.kenoDao = kenoDao;
		this.spinDao = spinDao;
		this.misetDao = misetDao;
		this.effchoicekDao = effchoicekDao;
		this.misekDao = misekDao;
		this.effchoicepDao = effchoicepDao;
		this.misepDao = misepDao;
		this.verstDao = verstDao;
		this.partnerDao = partnerDao;
		this.misektpDao = misektpDao;
		this.utilDao = utilDao;
		this.airtimeDao = airtimeDao;
	}
	
	@SuppressWarnings("unused")
	public Versement traiterTicket(HttpServletRequest request, Caissier caissier){
		
		Versement verst = null;
		boolean already_paid = Boolean.FALSE;
		bonusDown = Boolean.FALSE;
		
		String versement = getVersement( request, FIELD_VERS);
		String barcode = getBarcode( request,FIELD_CODE ) ;
		
		 if ( versement == null || versement.trim().length() == 0 || versement.equalsIgnoreCase("")
				 ) {
			// System.out.println("traiter ticket: "+versement);
			 
	        verst = new Versement();
	       
			if(barcode == null){
				return null;
			}
			else{
				barcode = barcode.substring(0, 10);
				System.out.println("BARCODE: "+barcode);
				
				if(!isTesting){
					isTesting = true;
					
					Miset miset = misetDao.searchTicketT(barcode);
					if(miset != null){ //le ticket existe
						System.out.println(" MISET BARCODE: "+barcode+" "+miset);
						Versement vers = verstDao.find_vers_miset(""+miset.getIdMiset());
						
						if(vers != null){
							System.out.println("VERS BARCODE: "+barcode+" , "+vers);
							already_paid = Boolean.TRUE;
							//le ticket a deja √©t√© trait√©
							resultat = "Ticket deja payÈ<br/>"+barcode+"<br/>"+vers.getMontant();
							setErreurs(FIELD_CODE, resultat);
							/* implementation here */
					        
						}
			//			else{
							//le ticket est en attente de traitement
							String typeJeu = miset.getTypeJeu();
							
							/*--- Keno traitment ---*/
							ArrayList<EffChoicek> ticket = new ArrayList<EffChoicek>();
							Misek mk = new Misek();
							
							/*--- Spin traitment ---*/
							ArrayList<EffChoicep> ticketp = new ArrayList<EffChoicep>();
							Misep mp = new Misep();
							
							switch(typeJeu)
							{
								case "K": // traitement ticket keno
									mk = misekDao.searchMisesK(""+miset.getIdMiset());
									if(mk != null){
										int xmulti = mk.getXmulti();
										bonusTicketCode = Integer.parseInt(mk.getBonusCodeK());
										//on recupere les evenements du ticket
										ticket = effchoicekDao.searchTicketK(""+mk.getIdmisek());
										//Misek _mk = misekDao.searchMiseK(""+mk.getIdmisek());
									//	System.out.println("EFFH EVNTS: "+ticket.size());
										
										if( ticket.size() > 0 ){
											multiplicite = 1;
											boolean winner = true;
											//winT = true;
										    boolean isEnd = true;
										    int tested = 0;
										    
										    // recuperation de tous les evenement du ticket
										  //     for(int i=0;i<ticket.size();i++){
										    	   
							    		   EffChoicek tick = new EffChoicek();
							    		   ArrayList<String> resultMulti  = new ArrayList<String>();
							    		   boolean multiple = false;
							    		   int multi = 1;
							    		   int num_draw;
							    		   int draw_numK; //numero de tirage en cours
							    		   String[] str_result;
							    		   String str0="",str1="";
							    		   //String result = "<html>";
							    		   String result = "";
							    		   String single_result="";
							    		   String result_multi;
							    		   double xtiplicateur = 1;
							    		   Keno k_keno = null;
							    		   boolean isDrawEnd = false; // controle si le tirage max est termin√©
							    		   
							    		   //recherche du numero de tirage en cours
							    		   Partner part = partnerDao.findById(Integer.parseInt(""+caissier.getPartner()));
							    		   Keno _keno = kenoDao.find_Max_draw(part.getCoderace());
							    		   
							    		   draw_numK = Integer.parseInt(_keno.getDrawNumK());
							    		   if(Integer.parseInt(_keno.getStarted()) == 0){ //tirage non termin√©
							    			   isDrawEnd = false;
							    		   }
							    		   else if(Integer.parseInt(_keno.getStarted()) == 1){//tirage termin√©
							    			   isDrawEnd = true;
							    		   }
							    		   
							    		   Misek_temp misektp = misektpDao.find(""+mk.getIdmisek());
							    		   multi = misektp.getMulti();
							    		   multiple = multi > 1 ? true : false;
							    		   
							    		   String lib_pari = utilDao.searchPariLById(ticket.get(0).getIdparil())[3];
							    		   
							    		   setDrawData("barcode", barcode);
							    		   setDrawData("player_choice", ticket.get(0).getKchoice());
							    		   setDrawData("multi", ""+multi);
							    		   setDrawData("cparil", ""+lib_pari);
							    		   setDrawData("montant", mk.getSumMise());
							    		   double mtant = Double.parseDouble(ticket.get(0).getMtchoix());
							    		   mtant = (double)((int)(mtant*100))/100;
							    		   setDrawData("u_montant", ""+mtant);
							    		   
							    		   if(multiple){
							    			    //resultMulti = new ArrayList<String>();
							    			    multiplicite = multi;
							    			    num_draw = misekDao.getNumDraw(ticket.get(0).getIdmisek());
							    			    
							    			    setDrawData("draw_num", ""+num_draw);
												//resultMulti.add(""+multi);
												
												int num_tirage_final = num_draw + multi - 1;
											//	System.out.println("DRAWNUMK: "+draw_numK+" NUM8TIRAGE: "+num_tirage_final+" BOOL: "+isDrawEnd);
											//	if(draw_numK >= num_tirage_final){
												/*   if(draw_numK <= num_tirage_final){
													   resultat = "Ticket non evalu√©, En cours";
													   setErreurs(FIELD_CODE, resultat);
												      return null;
												   }*/
													// recuperation des evnts dans effchoicek
													for(int i=0;i< multi;i++){
														int num = i + num_draw;
														k_keno = kenoDao.searchResultK(""+num);
														if(k_keno != null){
														  if(k_keno.getStarted().equalsIgnoreCase("1")){
															result_multi = k_keno.getDrawnumbK();
															resultMulti.add(result_multi);
															bonusWinAmount = Double.parseDouble(k_keno.getBonusKAmount());
										    				if(bonusWinAmount != 0) {
										    				   bonusDown = true;
										    				   bonusWinCode = Integer.parseInt(k_keno.getBonusKcod());
										    					   
										    				}
														  }
														  else{
															  result_multi = "";
														      resultMulti.add(result_multi);
														  }
														}
														else{
															result_multi = "";
															resultMulti.add(result_multi);
														}
													}
											//	}
											   
							    		   }
							    		   else{
							    			   
							    			   //on cherche le numero de tirage correspondant
							    			   num_draw = misekDao.getNumDraw(ticket.get(0).getIdmisek());
							    			   setDrawData("draw_num", ""+num_draw);
							    			  
							    			   //on cherche le resultat du tirage dans la table keno
							    			   k_keno = kenoDao.searchResultK(""+num_draw);
							    			   
							    			   bonusDown = false;
							    			   System.out.println("SINGLE: "+num_draw+" || "+k_keno.getStarted());
							    			   if(k_keno != null){
							    				   xtiplicateur = Double.parseDouble(k_keno.getMultiplicateur());
							    				   bonusWinAmount = Double.parseDouble(k_keno.getBonusKAmount());
							    				   if(bonusWinAmount != 0) {
							    					   bonusDown = true;
							    					   bonusWinCode = Integer.parseInt(k_keno.getBonusKcod());
							    					   
							    				   }
							    				   if(k_keno.getStarted().equalsIgnoreCase("1")){
							    					   System.out.println("SINGLE: "+num_draw+" || "+k_keno.getStarted());
							    					   single_result = k_keno.getDrawnumbK();
							    					   str_result = k_keno.getDrawnumbK().split("-");
							    					   System.out.println("SINGLE: "+num_draw+" | "+single_result);
							    					   for(int i=0;i<str_result.length;i++){
														   if(i<10){
															   str0 = str0+" "+str_result[i];
														   }
														   else if (i>9 && i<20){
															   str1 = str1+" "+str_result[i];
														   }
													   }
							    					  // result = result + str0 + "<br/>" + str1 + "<br/>" +  "<html>";
							    					   result = result + str0 + str1;
							    					   setDrawData("draw_result", result);
							    				   }
							    				   else{
							    					    resultat = "Ticket non evaluÈ";
														setErreurs(FIELD_CODE, resultat);
												        return null;
							    				   }  
							    			   }
							    			   
							    		   }
							    		   
							    		   // Verification du ticket
							    		   double _montant_evt = 0;//le prix d'un evenement
							    		   double gain_total = 0;
							    		   
							    		   
							    		   for(int i=0;i<ticket.size();i++ ){
							    			   
							    			   details_tickets = new HashMap<String, String>();
							    			   System.out.println("_RESULT-DETAILS: "+ticket.size());
							    			   if(multiple){
							    				   String[] _str;
												   String _str0 = "",_str1="";
												   //String _result = "<html>";
												   String _result = "";
												   
												   _str = resultMulti.get(i).split("-");
												  
												   for(int _i=0;_i<_str.length;_i++){
													   if(_i<10){
														   _str0 = _str0+" "+_str[_i];
													   }
													   else if (_i>9 && _i<20){
														   _str1 = _str1+" "+_str[_i];
													   }
												   }
												   _result = _result + _str0 + _str1;
											    	  // _result = _result + _str0 + "<br/>" + _str1 + "<br/>" +  "<html>";
											    	   System.out.println("_RESULT: "+_result);
											    	   setDetailTicket("resultTour", _result);
											    	   
											    	   double odd = UtileKeno.verifKeno(ticket.get(i), resultMulti.get(i));
											    	   //setDetailTicket("cote", ""+odd);
											    	   
											    	   if(odd != 0 && odd != -1){
											    		   setDetailTicket("etat", "true");
											    		   setDetailTicket("cote", ""+odd);
											    		   verst.setTypeVers("K");
											    		   _montant_evt = _montant_evt + Double.parseDouble(ticket.get(i).getMtchoix());
											    		   gain_total = gain_total + odd * Double.parseDouble(ticket.get(i).getMtchoix());
//											    		   if(xmulti != 0) {
//											    			   gain_total = gain_total / 
//											    		   }
											    		   gain_total = (double)((int)(gain_total*100))/100;
														}
											    	    else if(odd == 0){
														   setDetailTicket("etat", "false");
														   setDetailTicket("cote", ""+odd);
														}
														else{
														   setDetailTicket("etat", "pending");
														}
											    	   
											    	   evenements.add(details_tickets);
											    	   
							    			   }
							    			   else{
							    				   
							    				   double odd = UtileKeno.verifKeno(ticket.get(i), single_result);
										    	  // setDetailTicket("cote", ""+odd);
										    	   
										    	   if(odd != 0 && odd != -1){
										    		   setDetailTicket("etat", "true");
										    		   setDetailTicket("cote", ""+odd);
										    		   verst.setTypeVers("K");
										    		   _montant_evt = _montant_evt + Double.parseDouble(ticket.get(i).getMtchoix());
										    		   gain_total = gain_total + odd * Double.parseDouble(ticket.get(i).getMtchoix());
										    		  
										    		   if(xmulti != 0) {
										    			   gain_total = gain_total * xtiplicateur;
										    		   }
										    		   gain_total = (double)((int)(gain_total*100))/100;
													}
													else if(odd == 0){
													   setDetailTicket("etat", "false");
													   setDetailTicket("cote", ""+odd);
													}
													else{
													   setDetailTicket("etat", "pending");
													}
										    	   
							    				   setDetailTicket("resultTour", result);
							    				   evenements.add(details_tickets);
							    			   }
							    		   }
							    		   
							    		   int num_tirage_final = num_draw + multi - 1;
								    	   if(draw_numK <= num_tirage_final && multiple){
											   resultat = "Ticket non evaluÈ, En cours";
											   setErreurs(FIELD_CODE, resultat);
										      return null;
										   }
								    	   
								    	   if(bonusDown) {
								    		   if(bonusWinCode == bonusTicketCode) {
								    			   gain_total = gain_total + bonusWinAmount;
								    			   gain_total = (double)((int)(gain_total*100))/100;
								    		   }
								    	   }
							    		   setDrawData("prix_total", ""+_montant_evt);
							    		   setDrawData("gain_total", ""+gain_total);
							    		   if(gain_total == 0){
							    			   resultat = "Ticket perdant";
							    		   }
							    		   else if(already_paid){
							    			   resultat = "Ticket deja payÈ<br/>"+barcode+"<br/>"+vers.getMontant();
											   setErreurs(FIELD_CODE, resultat);
											  // gain_total = 0;
							    		   }
							    		   else if(!already_paid){
							    			   if(bonusDown) {
							    				   resultat = "Ticket bonus gagnant";
							    			   }
							    			   else {
							    				   resultat = "Ticket gagnant"; 
							    			   }
							    			   
							    		   }
										}
									}
								   break;
								case "D":
									
								   break;
								case "B":
								   
								   break;
								case "S": // traitement ticket de spin
									mp = misepDao.searchMisesP(""+miset.getIdMiset());
									if(mp != null){
										//on recupere les evenements du ticket
										ticketp = effchoicepDao.searchTicketP(""+mp.getIdmisep());
										
										System.out.println("EFFH EVNTS: "+ticketp.size());
										
										if( ticketp.size() > 0 ){
										   multiplicite = 1;
										   EffChoicep tickp = new EffChoicep();
							    		  
							    		   int multi = 1;
							    		   int num_draw;
							    		   int draw_numP; //numero de tirage en cours
							    		   String str_result;
							    		   
							    		   //String result = "<html>";
							    		   String result = "";
							    		   String single_result="";
							    		   
							    		   Spin p_spin = null;
							    		   boolean isDrawEnd = false; // controle si le tirage max est termin√©
							    		   
							    		   //recherche du numero de tirage en cours
							    		   Partner part = partnerDao.findById(Integer.parseInt(""+caissier.getPartner()));
							    		   //System.out.println("PART : "+part.getCoderace()+" SPIN: "+spinDao);
							    		   Spin _spin = spinDao.find_Max_draw(part.getCoderace());
							    		   
							    		   draw_numP = Integer.parseInt(_spin.getDrawNumP());
							    		   
							    		   if(Integer.parseInt(_spin.getStarted()) == 0){ //tirage non termin√©
							    			   isDrawEnd = false;
							    		   }
							    		   else if(Integer.parseInt(_spin.getStarted()) == 1){//tirage termin√©
							    			   isDrawEnd = true;
							    		   }
							    		   
							    		   String lib_pari = utilDao.searchPariPById(ticketp.get(0).getIdparis())[3];
							    		   
							    		   setDrawData("barcode", barcode);
							    		   setDrawData("player_choice", ticketp.get(0).getPchoice());
							    		   setDrawData("multi", "1");
							    		   setDrawData("cparil", ""+lib_pari);
							    		   setDrawData("montant", mp.getSumMise());
							    		   double mtant = Double.parseDouble(ticketp.get(0).getMtchoix());
							    		   mtant = (double)((int)(mtant*100))/100;
							    		   setDrawData("u_montant", ""+mtant);
							    		   
							    		 //on cherche le numero de tirage correspondant
						    			   num_draw = misepDao.getNumDraw(ticketp.get(0).getIdmisep());
						    			   setDrawData("draw_num", ""+num_draw);
						    			  
						    			   //on cherche le resultat du tirage dans la table keno
						    			   p_spin = spinDao.searchResultP(""+num_draw);
						    			  // System.out.println("SINGLE: "+num_draw+" || "+p_spin.getStarted());
						    			   
						    			   if(p_spin != null){
						    				   if(p_spin.getStarted().equalsIgnoreCase("1")){
						    					   System.out.println("SINGLE: "+num_draw+" || "+p_spin.getStarted());
						    					   single_result = p_spin.getDrawnumbP();
						    					   //str_result = p_spin.getDrawnumbK().split("-");
						    					   System.out.println("SINGLE: "+num_draw+" | "+single_result);
						    					   
						    					  // result = result + str0 + "<br/>" + str1 + "<br/>" +  "<html>";
						    					   result = result + single_result;
						    					   setDrawData("draw_result", result);
						    				   }
						    				   else{
						    					    resultat = "Ticket non evalu√©";
													setErreurs(FIELD_CODE, resultat);
											        return null;
						    				   }  
						    			   }
							    		   
						    			   
						    			   double _montant_evt = 0;//le prix d'un evenement
							    		   double gain_total = 0;
							    		   
							    		   for(int i=0;i<ticketp.size();i++ ){
							    			   
							    			   details_tickets = new HashMap<String, String>();
							    			   System.out.println("_RESULT-DETAILS: "+ticketp.size());
							    			   
							    			   double odd = UtileSpin.verifSpin(ticketp.get(i), single_result);
										    	  // setDetailTicket("cote", ""+odd);
										    	   
										    	   if(odd != 0 && odd != -1){
										    		   setDetailTicket("etat", "true");
										    		   setDetailTicket("cote", ""+odd);
										    		   verst.setTypeVers("S");
										    		   _montant_evt = _montant_evt + Double.parseDouble(ticketp.get(i).getMtchoix());
										    		   gain_total = gain_total + odd * Double.parseDouble(ticketp.get(i).getMtchoix());
													}
													else if(odd == 0){
													   setDetailTicket("etat", "false");
													   setDetailTicket("cote", ""+odd);
													}
													else{
													   setDetailTicket("etat", "pending");
													}
										    	   
							    				   setDetailTicket("resultTour", result);
							    				   evenements.add(details_tickets);
							    		   }
							    		   
							    		   
							    		   setDrawData("prix_total", ""+_montant_evt);
							    		   setDrawData("gain_total", ""+gain_total);
							    		   if(gain_total == 0){
							    			   resultat = "Ticket perdant";
							    		   }
							    		   else{
							    			   resultat = "Ticket gagnant";
							    		   }
										}
									}
									   break;
								default:
									resultat = "Jeu inconnu";
									setErreurs(FIELD_CODE, resultat);
							        return null;
							}
							
		//				}
					}
					else{ //le ticket n'existe pas
						 resultat = "Ticket inconnu";
						 setErreurs(FIELD_CODE, resultat);
				         return null;
					}
					
				}
			}
		
			return verst;
		}
		 else if ( versement != null || versement.trim().length() != 0 || !versement.equalsIgnoreCase("0.0")
				 || versement.equalsIgnoreCase("0")){
				System.out.println("Traiter versement: "+versement+" barcode: "+barcode);
				verst = new Versement();
				
				//on verifie si le ticket n'a pas deja √©t√© pay√©
				
				Miset miset = misetDao.searchTicketT(barcode);
				if(miset != null){ //le ticket existe
					
					Versement vers = verstDao.find_vers_miset(""+miset.getIdMiset());
					
					if(vers != null){
						System.out.println("TICKET DEJA PAYE: "+barcode+" , "+vers);
						//le ticket a deja √©t√© trait√©
						resultat = "Ticket deja payÈ";
						setErreurs(FIELD_CODE, resultat);
						/* implementation here */
						return null;
					}
					else{
						System.out.println("VERSEMENT TICKET: "+barcode);
						Versement versemt = new Versement();
						
						String txtDate=new SimpleDateFormat("dd/MM/yyyy,H:m:s", Locale.FRANCE).format(new Date());
						long tms;
						try {
							tms = Timestamp.givetimestamp(txtDate);
							
							double mvt = airtimeDao.findMvt(caissier.getId());
							airtimeDao.updateMvt(caissier.getId(), mvt+Double.parseDouble(versement));
							
							versemt.setCaissier(""+caissier.getId());
							versemt.setDatV(txtDate);
							versemt.setHeureV(""+tms);
							versemt.setTypeVers(miset.getTypeJeu());
							versemt.setMontant(Double.parseDouble(versement));
							versemt.setMise(miset.getIdMiset());
							
							verstDao.create(versemt);
						} catch (ParseException | DAOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}
				}
				
				return verst;
	     }
		return verst;
		 
	}
	
	private String getBarcode( HttpServletRequest request,String nomChamp ) {
        String valeur = request.getParameter( nomChamp );
       
       if ( valeur == null || valeur.trim().length() != 10 ) {
    	   resultat = "Ticket inconnu";
		   setErreurs(FIELD_CODE, resultat);
           return null;
       } else{
    	  return valeur.trim(); 
       }
       
	}
	
	private String getVersement( HttpServletRequest request,String nomChamp ) {
        String valeur = request.getParameter( nomChamp );
        
        if(valeur == null)
        	return valeur;
        else
    	    return valeur.trim(); 
	}
	
	
	
}
